// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package data

import (
	"context"
	"database/sql"
)

const createConfig = `-- name: CreateConfig :execresult
INSERT INTO configs (
    created_at,
    updated_at,
    server_id
) VALUES (
    datetime('now'),
    datetime('now'),
    $1
)
`

func (q *Queries) CreateConfig(ctx context.Context, serverID string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createConfig, serverID)
}

const createEntity = `-- name: CreateEntity :execresult
INSERT INTO entities (
    created_at,
    updated_at,
    name,
    server_id
) VALUES (
    datetime('now'),
    datetime('now'),
    $1,
    $2
)
`

type CreateEntityParams struct {
	Name     string
	ServerID string
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEntity, arg.Name, arg.ServerID)
}

const deleteConfig = `-- name: DeleteConfig :exec
DELETE FROM configs WHERE id = $1
`

func (q *Queries) DeleteConfig(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteConfig, id)
	return err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities WHERE id = $1
`

func (q *Queries) DeleteEntity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, id)
	return err
}

const getBotEntities = `-- name: GetBotEntities :many
SELECT id, created_at, updated_at, name, server_id, karma FROM entities
WHERE server_id = $1 ORDER BY karma ASC LIMIT $2
`

type GetBotEntitiesParams struct {
	ServerID string
	Limit    int32
}

func (q *Queries) GetBotEntities(ctx context.Context, arg GetBotEntitiesParams) ([]Entity, error) {
	rows, err := q.db.QueryContext(ctx, getBotEntities, arg.ServerID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entity
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ServerID,
			&i.Karma,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConfig = `-- name: GetConfig :one
SELECT id, created_at, updated_at, server_id, no_announce FROM configs
WHERE server_id = $1
`

func (q *Queries) GetConfig(ctx context.Context, serverID string) (Config, error) {
	row := q.db.QueryRowContext(ctx, getConfig, serverID)
	var i Config
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ServerID,
		&i.NoAnnounce,
	)
	return i, err
}

const getEntity = `-- name: GetEntity :one
SELECT id, created_at, updated_at, name, server_id, karma FROM entities
WHERE server_id = $1 AND name = $2
`

type GetEntityParams struct {
	ServerID string
	Name     string
}

func (q *Queries) GetEntity(ctx context.Context, arg GetEntityParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, getEntity, arg.ServerID, arg.Name)
	var i Entity
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ServerID,
		&i.Karma,
	)
	return i, err
}

const getTopEntities = `-- name: GetTopEntities :many
SELECT id, created_at, updated_at, name, server_id, karma FROM entities
WHERE server_id = $1 ORDER BY karma DESC LIMIT $2
`

type GetTopEntitiesParams struct {
	ServerID string
	Limit    int32
}

func (q *Queries) GetTopEntities(ctx context.Context, arg GetTopEntitiesParams) ([]Entity, error) {
	rows, err := q.db.QueryContext(ctx, getTopEntities, arg.ServerID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entity
	for rows.Next() {
		var i Entity
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.ServerID,
			&i.Karma,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const putConfig = `-- name: PutConfig :exec
UPDATE configs SET
    updated_at = datetime('now'),
    no_announce = $1
WHERE server_id = $2
`

type PutConfigParams struct {
	NoAnnounce bool
	ServerID   string
}

func (q *Queries) PutConfig(ctx context.Context, arg PutConfigParams) error {
	_, err := q.db.ExecContext(ctx, putConfig, arg.NoAnnounce, arg.ServerID)
	return err
}

const putEntity = `-- name: PutEntity :exec
UPDATE entities SET
    updated_at = datetime('now'),
    karma = $1
WHERE id = $2
`

type PutEntityParams struct {
	Karma int64
	ID    int32
}

func (q *Queries) PutEntity(ctx context.Context, arg PutEntityParams) error {
	_, err := q.db.ExecContext(ctx, putEntity, arg.Karma, arg.ID)
	return err
}
